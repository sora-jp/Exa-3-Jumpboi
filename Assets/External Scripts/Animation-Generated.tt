<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="UnityEngine" #>
<#@ import namespace="UnityEngine.UI" #>
<#@ output extension=".cs" #>
#pragma warning disable

/*
	This file was auto-generated by a tool. Any changes will be lost upon regeneration.
*/

namespace UnityBase.Animations
{
    public static partial class Animation
    {
<#
		//Generate(typeof(Transform));
		//Generate(typeof(Image)); 
		//Generate(typeof(CanvasGroup)); 
		//Generate(typeof());

		HashSet<string> seen = new HashSet<string>();
		var assemblies = AppDomain.CurrentDomain.GetAssemblies();
		var types = assemblies.SelectMany(a => a.GetTypes());

		var lerpMethods = types.SelectMany(t => t.GetMethods(BindingFlags.Public | BindingFlags.Static)).Where(m => m.Name == "Lerp" && m.GetParameters()[2].ParameterType == typeof(float));
		var methodDicts = new Dictionary<Type, MethodInfo>();
		foreach (var m in lerpMethods) if (!methodDicts.ContainsKey(m.ReturnType)) methodDicts.Add(m.ReturnType, m);

		types = types.Where(t => t.IsClass && t.IsPublic && t.IsSubclassOf(typeof(Component)));
		foreach (var t in types) Generate(t, seen, methodDicts);
#>
    }
}

<#+
string Case(string a) 
{
	return (char.ToUpper(a[0]) + a.Substring(1)).Replace("_", "");
}

void Generate(Type t, HashSet<string> seen, Dictionary<Type, MethodInfo> lerpers) 
{
	foreach (var prop in t.GetProperties()) Generate(prop, seen, lerpers);
}

void Generate(PropertyInfo toAnimate, HashSet<string> seen, Dictionary<Type, MethodInfo> lerpers) 
{
	if (seen.Contains(toAnimate.DeclaringType.FullName + toAnimate.Name)) return;
	seen.Add(toAnimate.DeclaringType.FullName + toAnimate.Name);
	if (!toAnimate.CanWrite) return;
	if (!lerpers.ContainsKey(toAnimate.PropertyType)) return;
	var lerper = lerpers[toAnimate.PropertyType];
	var animType = $"{toAnimate.DeclaringType.Namespace}.{toAnimate.DeclaringType.Name}";
	var propType = $"{toAnimate.PropertyType.Namespace}.{toAnimate.PropertyType.Name}";

#>
		public static <#=animType#> Animate<#=Case(toAnimate.Name)#>(this <#=animType#> obj,<#=propType#> newValue,float duration=1,EaseMode easeMode=EaseMode.Linear){obj.Animate("<#=toAnimate.Name#>",newValue,duration,<#=lerper.DeclaringType.FullName#>.<#=lerper.Name#>,easeMode);return obj;}
		public static UnityEngine.GameObject Animate<#=Case(toAnimate.DeclaringType.Name)#><#=Case(toAnimate.Name)#>(this UnityEngine.GameObject obj,<#=propType#> newValue,float duration=1,EaseMode easeMode=EaseMode.Linear){obj.GetComponent<<#=animType#>>()?.Animate("<#=toAnimate.Name#>",newValue,duration,<#=lerper.DeclaringType.FullName#>.<#=lerper.Name#>,easeMode);return obj;}
		public static T Animate<#=Case(toAnimate.DeclaringType.Name)#><#=Case(toAnimate.Name)#><T>(this T obj,<#=propType#> newValue,float duration=1,EaseMode easeMode=EaseMode.Linear)where T:UnityEngine.MonoBehaviour{obj.GetComponent<<#=animType#>>()?.Animate("<#=toAnimate.Name#>",newValue,duration,<#=lerper.DeclaringType.FullName#>.<#=lerper.Name#>,easeMode);return obj;}
<#+

}

#>